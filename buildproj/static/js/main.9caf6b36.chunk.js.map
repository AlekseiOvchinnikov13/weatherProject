{"version":3,"sources":["interface/CurrentWeather.ts","interface/ForecastWeather.ts","api/api.tsx","components/btn/index.tsx","components/inputText/index.tsx","components/forecastWeather/index.tsx","components/modal/index.tsx","components/currentWeatherCard/index.tsx","components/addCardBtn/index.tsx","components/weatherCard/index.tsx","components/container/index.tsx","store/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CurrentWeather","weatherResponse","id","weather","main","name","coord","this","ForecastWeather","forecastResponse","today","tomorrow","lat","lon","daily","current","API_key","getGeoWeatherForecast","props","url","axios","get","then","response","data","catch","console","log","inject","observer","invert","onClick","title","classes","classNames","className","onChange","e","store","setSelectedCity","target","value","type","placeholder","forecast","Math","round","temp","style","backgroundImage","icon","day","Modal","isOpen","onCancel","onSubmit","isAdding","useState","titleCancelBtn","setTitleCancelBtn","oneBtn","useEffect","document","addEventListener","clickOutside","removeEventListener","defaultProps","setIsOpen","setTitle","getForecastWeather","setForecast","item","currentWeather","clearForecast","handlerModal","selectedCity","cityName","getGeoWeatherByName","action","addLocation","error","locations","map","openCurrentCard","deleteLocation","loading","setLoading","position","setPosition","success","coords","latitude","longitude","toFixed","navigator","geolocation","getCurrentPosition","err","getGeoWeather","setCurrentWeather","makeObservable","find","element","push","observable","array","filter","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9caf6b36.chunk.js","sourcesContent":["export class CurrentWeather {\r\n    id: number;\r\n    weather: object[];\r\n    main: object;\r\n    name: string;\r\n    coord: object;\r\n\r\n    constructor(weatherResponse: any) {\r\n        this.id = weatherResponse.id;\r\n        this.name = weatherResponse.name;\r\n        this.main = weatherResponse.main;\r\n        this.weather = weatherResponse.weather;\r\n        this.coord = weatherResponse.coord;\r\n    }\r\n}\r\n\r\n","export class ForecastWeather {\r\n    coord: object;\r\n    today: object;\r\n    tomorrow: object;\r\n\r\n    constructor(forecastResponse: any) {\r\n        this.coord = {\r\n            lat: forecastResponse.lat,\r\n            lon: forecastResponse.lon\r\n        };\r\n        this.tomorrow = forecastResponse.daily[0];\r\n        this.today = forecastResponse.current;\r\n    }\r\n}\r\n\r\n","import axios from \"axios\";\r\nimport {CurrentWeather} from \"../interface/CurrentWeather\";\r\nimport {ForecastWeather} from \"../interface/ForecastWeather\";\r\n\r\nconst API_key = '46329390d425d0a34e2d1f8601c85566';\r\n\r\n/**\r\n * Получить погоду по текущему местоположению\r\n * @param props\r\n */\r\nexport const getGeoWeather: (props: any) => Promise<CurrentWeather | void> = (props) => {\r\n    const lat: number = props.lat;\r\n    const lon: number = props.lon;\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&lang=ru&units=metric&appid=${API_key}`;\r\n\r\n    return axios.get(url)\r\n        .then(response => {\r\n            let currentWeather = new CurrentWeather(response.data);\r\n            return (currentWeather);\r\n        })\r\n        .catch(err => console.log(err))\r\n};\r\n\r\n/**\r\n * Получить погоду по названию города\r\n * @param {String} cityName название города\r\n */\r\nexport const getGeoWeatherByName: (cityName: string) => Promise<CurrentWeather | void> = (cityName) => {\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&lang=ru&units=metric&appid=${API_key}`;\r\n\r\n    return axios.get(url)\r\n        .then(response => new CurrentWeather(response.data))\r\n        .catch(() => console.log(`Город ${cityName} не найден.`))\r\n}\r\n\r\n/**\r\n * Получить погоду на 2 дня для города по широте и долготе\r\n * @param props\r\n */\r\nexport const getGeoWeatherForecast: (props: any) => Promise<ForecastWeather | void> = (props) => {\r\n    const lat: number = props.lat;\r\n    const lon: number = props.lon;\r\n    const url = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude={daily}&lang=ru&units=metric&appid=${API_key}`;\r\n\r\n    return axios.get(url)\r\n        .then(response => new ForecastWeather(response.data))\r\n        .catch(() => console.log('Не удалось получить данные.'))\r\n}\r\n","import React from \"react\";\r\nimport classNames from 'classnames';\r\nimport PropTypes from 'prop-types';\r\nimport './style.scss'\r\nimport {inject, observer} from \"mobx-react\";\r\n\r\nexport const Btn = ({invert, onClick, title}: any) => {\r\n\r\n    const classes = classNames(\r\n        'btn',\r\n        {invert}\r\n    )\r\n    return (\r\n        <button\r\n            onClick={onClick}\r\n            className={classes}\r\n        >\r\n            {title}\r\n        </button>\r\n    )\r\n};\r\n\r\nBtn.propTypes = {\r\n    title: PropTypes.string,\r\n    invert: PropTypes.bool,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default inject('store')(observer(Btn));\r\n","import React from 'react';\r\nimport './style.scss';\r\nimport {inject, observer} from \"mobx-react\";\r\n\r\nconst InputText = (props: any) => {\r\n    const onChange = (e: any) => {\r\n        props.store.setSelectedCity(e.target.value);\r\n    }\r\n    return (\r\n        <input\r\n            onChange={(e: any) => onChange(e)}\r\n            className='input-text'\r\n            type='text'\r\n            name='cityName'\r\n            placeholder='Введите название города'/>\r\n    )\r\n}\r\n\r\nexport default inject('store')(observer(InputText));\r\n","import React from 'react'\r\nimport {inject, observer} from \"mobx-react\";\r\nimport './style.scss';\r\n\r\nconst ForecastWeather = (props: any) => {\r\n    const {today, tomorrow} = props.store.forecast;\r\n    const forecast = ['Сегодня', 'Завтра'];\r\n\r\n    if (!today || !tomorrow) return null;\r\n\r\n    return (\r\n        <div className='forecast-wrapper'>\r\n            <div className=\"forecast-weather\">\r\n                <div className=\"forecast-title\">{forecast[0]}</div>\r\n                <div className=\"forecast-inner\">\r\n                    <div className=\"forecast-temp\">{Math.round(today.temp)} &#8451;</div>\r\n                    <div\r\n                        className=\"forecast-icon\"\r\n                        style={{\r\n                            backgroundImage: `url('http://openweathermap.org/img/wn/${today.weather[0].icon}@2x.png')`\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"graphic\"></div>\r\n            </div>\r\n            <div className=\"forecast-weather\">\r\n                <div className=\"forecast-title\">{forecast[1]}</div>\r\n                <div className=\"forecast-inner\">\r\n                    <div className=\"forecast-temp\">{Math.round(tomorrow.temp.day)} &#8451;</div>\r\n                    <div\r\n                        className=\"forecast-icon\"\r\n                        style={{\r\n                            backgroundImage: `url('http://openweathermap.org/img/wn/${tomorrow.weather[0].icon}@2x.png')`\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className=\"graphic\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default inject('store')(observer(ForecastWeather));\r\n","import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Btn from \"../btn\";\r\nimport './style.scss';\r\nimport InputText from \"../inputText\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport ForecastWeather from \"../forecastWeather\";\r\n\r\nconst Modal = ({title, isOpen, onCancel, onSubmit, isAdding}: any) => {\r\n    const [titleCancelBtn,setTitleCancelBtn] = useState('Отмена');\r\n    const oneBtn = !isAdding ? 'one-button' : '';\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', clickOutside);\r\n        return () => {\r\n            document.removeEventListener('mousedown', clickOutside);\r\n        };\r\n    });\r\n\r\n    useEffect(() => {\r\n        !isAdding && setTitleCancelBtn('Закрыть');\r\n    }, [])\r\n\r\n    const clickOutside = (e: any) => {\r\n        if (isOpen && (e.target.className === 'modal-overlay' || e.target.className === 'modal-close')) {\r\n            onCancel();\r\n        }\r\n    };\r\n\r\n    return <>\r\n        {isOpen &&\r\n        <div className='modal-overlay'>\r\n            <div className=\"modal-window\">\r\n                <div className=\"modal-header\">\r\n                    <div className=\"modal-title\">{title}</div>\r\n                    <div className=\"modal-close\" onClick={onCancel}>×</div>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                    {isAdding\r\n                        ? <InputText/>\r\n                        : <ForecastWeather/>}\r\n                </div>\r\n                <div className={`modal-footer ${oneBtn}`}>\r\n                    {isAdding && <Btn title={'Добавить'} onClick={onSubmit} invert/>}\r\n                    <Btn title={titleCancelBtn} onClick={onCancel}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        }\r\n    </>\r\n};\r\n\r\nModal.propTypes = {\r\n    title: PropTypes.string,\r\n    isOpen: PropTypes.bool.isRequired,\r\n    onCancel: PropTypes.func.isRequired,\r\n    onSubmit: PropTypes.func,\r\n    isAdding: PropTypes.bool\r\n};\r\nModal.defaultProps = {\r\n    isAdding: true\r\n};\r\n\r\nexport default inject('store')(observer(Modal));\r\n","import React, {useState} from 'react'\r\nimport {inject, observer} from 'mobx-react'\r\nimport './style.scss'\r\nimport {CurrentWeather} from \"../../interface/CurrentWeather\";\r\nimport {getGeoWeatherForecast} from \"../../api/api\";\r\nimport {ForecastWeather} from \"../../interface/ForecastWeather\";\r\nimport Modal from \"../modal\";\r\n\r\nconst CurrentWeatherCard = (props: any) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n    const handlerModal = () => {\r\n        props.store.clearForecast();\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    const openCurrentCard = (item: CurrentWeather) => {\r\n        setTitle(item.name);\r\n        getForecastWeather(item.coord);\r\n        setIsOpen(!isOpen);\r\n    }\r\n    const getForecastWeather = (id: object) => {\r\n        getGeoWeatherForecast(id)\r\n            .then(response => {\r\n                props.store.setForecast(response as ForecastWeather)\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div key={props.store.currentWeather.name}\r\n                 className='card-wrapper'\r\n                 onClick={() => openCurrentCard(props.store.currentWeather)}>\r\n                <div className='card-wrapper__place'>\r\n                    Мое Местоположение\r\n                </div>\r\n                <div className='card-wrapper__temp'>\r\n                    {props.store.currentWeather.main.temp} &#8451;\r\n                </div>\r\n\r\n                <div className='card-wrapper__icon'\r\n                     style={{\r\n                         backgroundImage: `url('http://openweathermap.org/img/wn/${props.store.currentWeather.weather[0].icon}@2x.png')`\r\n                     }}\r\n                />\r\n            </div>\r\n            <Modal onCancel={handlerModal} isOpen={isOpen} isAdding={false} title={title}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default inject('store')(observer(CurrentWeatherCard));\r\n","import React, {useState} from 'react';\r\nimport {inject, observer} from \"mobx-react\";\r\nimport {action} from 'mobx';\r\nimport './style.scss';\r\nimport Modal from \"../modal\";\r\nimport {getGeoWeatherByName} from \"../../api/api\";\r\nimport {CurrentWeather} from \"../../interface/CurrentWeather\";\r\n\r\nconst AddCardButton = (props: any) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const handlerModal = () => setIsOpen(!isOpen);\r\n\r\n    const submitModal = () => {\r\n        if (props.store.selectedCity) {\r\n            getGeoWeatherByName(props.store.selectedCity)\r\n                .then(action(response => {\r\n                    props.store.addLocation(response as CurrentWeather)\r\n                }))\r\n                .catch(error => console.log(error))\r\n            setIsOpen(!isOpen);\r\n            props.store.setSelectedCity('');\r\n        } else console.log('Введите название города.');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <button className=\"btn-wrapper\" onClick={handlerModal}>\r\n                <div className=\"btn-wrapper__icon\"\r\n                     style={{\r\n                         backgroundImage: `url('https://cdn1.iconfinder.com/data/icons/utilities-part-1/64/add_1-512.png')`\r\n                     }}/>\r\n                <p className=\"btn-wrapper__text\">Добавить</p>\r\n            </button>\r\n            <Modal onCancel={handlerModal} isOpen={isOpen} onSubmit={submitModal} title={'Добавить'}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default inject('store')(observer(AddCardButton));\r\n","import React, {useState} from 'react'\r\nimport {inject, observer} from 'mobx-react'\r\nimport './style.scss'\r\nimport Btn from \"../btn\";\r\nimport {getGeoWeatherForecast} from \"../../api/api\";\r\nimport Modal from \"../modal\";\r\nimport {CurrentWeather} from \"../../interface/CurrentWeather\";\r\nimport {ForecastWeather} from \"../../interface/ForecastWeather\";\r\n\r\nconst WeatherCard = (props: any) => {\r\n    const deleteCard = (id: number) => {\r\n        props.store.deleteLocation(id);\r\n    };\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [title, setTitle] = useState('');\r\n    const handlerModal = () => {\r\n        props.store.clearForecast();\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    const openCurrentCard = (item: CurrentWeather) => {\r\n        setTitle(item.name);\r\n        getForecastWeather(item.coord);\r\n        setIsOpen(!isOpen);\r\n    }\r\n\r\n    const getForecastWeather = (id: object) => {\r\n        getGeoWeatherForecast(id)\r\n            .then(response => {\r\n                props.store.setForecast(response as ForecastWeather)\r\n            })\r\n            .catch(console.log);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.store.locations.map((item: any) =>\r\n                <div className='weather-card' key={item.id}>\r\n                    <div\r\n                        onClick={() => openCurrentCard(item)}\r\n                        className='card-wrapper'>\r\n                        <div className='card-wrapper__place'>\r\n                            {item.name}\r\n                        </div>\r\n                        <div className='card-wrapper__temp'>\r\n                            {Math.round(item.main.temp)} &#8451;\r\n                        </div>\r\n                        <div className='card-wrapper__icon'\r\n                             style={{\r\n                                 backgroundImage: `url('http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png')`\r\n                             }}\r\n                        />\r\n                    </div>\r\n                    <Btn onClick={() => deleteCard(item.id)}/>\r\n                </div>\r\n            )}\r\n            <Modal onCancel={handlerModal} isOpen={isOpen} isAdding={false} title={title}/>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default inject('store')(observer(WeatherCard));\r\n","import React, {useEffect, useState} from 'react'\r\nimport CurrentWeatherCard from \"../currentWeatherCard\";\r\nimport AddCardButton from \"../addCardBtn\";\r\nimport {getGeoWeather} from \"../../api/api\";\r\nimport {CurrentWeather} from \"../../interface/CurrentWeather\";\r\nimport {inject, observer} from \"mobx-react\";\r\nimport WeatherCard from \"../weatherCard\";\r\nimport './style.scss';\r\n\r\nconst Container = (props: any) => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [position, setPosition] = useState({lat: 0, lon: 0});\r\n\r\n    const success = ({coords: {latitude, longitude}}: any) => {\r\n        setPosition({\r\n            lat: latitude.toFixed(4),\r\n            lon: longitude.toFixed(4)\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(success);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (position.lat || position.lon)\r\n            getGeoWeather(position)\r\n                .then(response => {\r\n                    props.store.setCurrentWeather(response as CurrentWeather)\r\n                    setLoading(false);\r\n                })\r\n                .catch(console.log)\r\n    }, [position.lat, position.lon])\r\n\r\n\r\n    if (loading) return null;\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <CurrentWeatherCard/>\r\n            <WeatherCard />\r\n            <AddCardButton/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default inject('store')(observer(Container));\r\n\r\n","import {action, makeObservable, observable} from 'mobx'\r\nimport {CurrentWeather} from \"../interface/CurrentWeather\";\r\nimport {ForecastWeather} from \"../interface/ForecastWeather\";\r\n\r\nclass Store {\r\n    constructor() {\r\n        makeObservable(this);\r\n    }\r\n\r\n    @observable currentWeather: CurrentWeather = {} as CurrentWeather;\r\n    @action setCurrentWeather = (weather: CurrentWeather) => {\r\n        this.currentWeather.id = weather.id;\r\n        this.currentWeather.name = weather.name;\r\n        this.currentWeather.main = weather.main;\r\n        this.currentWeather.weather = weather.weather;\r\n        this.currentWeather.coord = weather.coord;\r\n    };\r\n\r\n    @observable locations: CurrentWeather[] = observable.array();\r\n    @action addLocation (weather: CurrentWeather) {\r\n        this.locations.find(element => weather.name === element.name)\r\n            ? console.log(`Карточка погоды в городе ${weather.name} уже добавлена`)\r\n            : this.locations.push(weather);\r\n    };\r\n    @action deleteLocation = (id: Number) => {\r\n        this.locations = this.locations.filter((element) => {\r\n            return element.id !== id;\r\n        });\r\n    };\r\n\r\n    @observable selectedCity: string = '';\r\n    @action setSelectedCity = (name: string) => this.selectedCity = name;\r\n\r\n    @observable forecast: ForecastWeather = {} as ForecastWeather;\r\n    @action setForecast = (element: ForecastWeather) => {\r\n        this.forecast = element;\r\n    }\r\n    @action clearForecast = () => {\r\n        this.forecast = {} as ForecastWeather;\r\n    }\r\n\r\n}\r\n\r\nexport default new Store();\r\n","import React from 'react';\nimport './App.scss';\nimport Container from \"./components/container\";\nimport store from \"./store/store\";\nimport {Provider} from \"mobx-react\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <Container/>\n                </header>\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}